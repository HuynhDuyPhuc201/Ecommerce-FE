import axios from 'axios';
import { getToken, setToken } from '../core/token';
import { userService } from '~/services/user.service';
import { API_ROOT } from '~/utils/constants';

// Kh·ªüi t·∫°o Axios instance
const api = axios.create({
    baseURL: API_ROOT,
    withCredentials: true, // ‚úÖ ƒê·∫£m b·∫£o lu√¥n g·ª≠i cookie trong request
});

// Request Interceptor: G·ª≠i token trong header n·∫øu c√≥ (n·∫øu l∆∞u access token v√†o cookie th√¨ kh√¥ng c·∫ßn g·ª≠i token trong header)
api.interceptors.request.use((config) => {
    // const token = getToken();
    // if (token) {
    //     config.headers.Authorization = `Bearer ${token}`;
    // }
    return config;
});

// Response Interceptor: X·ª≠ l√Ω l·ªói v√† refresh token (n·∫øu l∆∞u access token v√†o cookie th√¨ kh√¥ng c·∫ßn refresh token - BE s·∫Ω x·ª≠ l√Ω vi·ªác ƒë√≥)
// n·∫øu l∆∞u v√†o localStorage th√¨ c·∫ßn refresh token (d·ªÖ b·ªã t·∫•n c√¥ng SSR n·∫øu l√† app l·ªõn)
// t·ªët nh·∫•t l√† l∆∞u ·ªü Cookie ƒë·ªÉ BE x·ª≠ l√≠
api.interceptors.response.use(
    (res) => {
        return res.data;
    },
    // async (err) => {
    //     // console.log('L·ªói API:', err?.response?.data);

    //     // Ki·ªÉm tra l·ªói do token h·∫øt h·∫°n
    //     if (err?.response?.data?.message === 'Token is not valid') {
    //         try {
    //             console.log('üîÑ Refreshing token...');

    //             // G·ªçi API refresh token
    //             const newAccessToken = await userService.refreshToken();

    //             // L∆∞u token m·ªõi v√†o localStorage ho·∫∑c cookie
    //             setToken(newAccessToken.access_token);

    //             // C·∫≠p nh·∫≠t token m·ªõi v√†o headers c·ªßa axios
    //             api.defaults.headers.Authorization = `Bearer ${newAccessToken.access_token}`;

    //             // G·ª≠i l·∫°i request ban ƒë·∫ßu v·ªõi token m·ªõi
    //             err.config.headers.Authorization = `Bearer ${newAccessToken.access_token}`;
    //             return api.request(err.config);
    //         } catch (refreshError) {
    //             console.error('üö® Refresh token failed', refreshError);
    //             throw new Error(refreshError?.response?.data);
    //         }
    //     }

    //     return Promise.reject(err);
    // },
);

export default api;
